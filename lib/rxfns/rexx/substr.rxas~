/*
 * cREXX COMPILER VERSION : cREXX F0034
 * SOURCE                 : substr
 * BUILT                  : 2021-10-05 18:28:38
 */

.globals=0

raise() .expose=global.raise

length() .expose=global.length

substr() .locals=15 .expose=substr.substr
   * Line 15: string1 = .string
   brtpandt l23c,a1,2
   scopy r1,a1
   br l23d
l23c:
   swap r1,a1
l23d:
   * Line 15: start = .int
   icopy r2,a2
   * Line 15: length = 0
   brtpandt l30a,a3,1
   load a3,0
l30a:
   * Line 15: pad = ' '
   brtpandt l33a,a4,1
   load r3," "
   br l33d
l33a:
   brtpandt l33c,a4,2
   scopy r3,a4
   br l33d
l33c:
   swap r3,a4
l33d:
   * Line 18: padchar = 0
   load r4,0
   * Line 19: output = ''
   load r5,""
   * Line 20: inputLength = 0
   load r6,0
   * Line 21: padLength = 0
   load r7,0
   * Line 24: {IF} start < 1
   ilt r8,r2,1
   brf l57,r8
   * Line 24: {THEN}
   * Line 24: call raise "syntax", "40.??", start
   * Line 24: raise "syntax", "40.??", start
   load r9,3
   load r10,"syntax"
   settp r10,2
   load r11,"40.\?\?"
   settp r11,2
   itos r2
   swap r12,r2
   call r13,raise(),r9
   swap r2,r12
l57:
   * Line 25: start = start - 1
   isub r2,r2,1
   * Line 28: strlen padLength,pad
   strlen r7,r3
   * Line 29: {IF} padLength > 1
   igt r12,r7,1
   brf l74,r12
   * Line 29: {THEN}
   * Line 29: call raise "syntax", "40.23", pad
   * Line 29: raise "syntax", "40.23", pad
   load r8,3
   load r9,"syntax"
   settp r9,2
   load r10,"40.23"
   settp r10,2
   swap r11,r3
   call r14,raise(),r8
   swap r3,r11
l74:
   * Line 32: strlen inputLength,string1
   strlen r6,r1
   * Line 33: inputLength = inputLength - start
   isub r6,r6,r2
   * Line 35: {IF} inputLength > 0
   igt r12,r6,0
   brf l172,r12
   * Line 37: {THEN}
   * Line 37: {IF} length <= inputLength
   ilte r11,a3,r6
   brf l147,r11
   * Line 39: {THEN}
   * Line 39: {DO}
   * Line 39: i = start
   copy r10,r2
   * Line 39: to start + length - 1
   iadd r9,r2,a3
   isub r9,r9,1
l104:
   * Line 39: to start + length - 1
   igt r0,r10,r9
   brt l98,r0
   * Line 40: concchar output,string1,i
   concchar r5,r1,r10
   * Line 39: {Implicit "BY 1"}
   inc r10
   * Line 39: {DO-END}
   br l104
l98:
   br l122
   * Line 45: {ELSE}
l147:
   * Line 45: {DO}
   * Line 45: i = start
   copy r10,r2
   * Line 45: to start + inputLength - 1
   iadd r9,r2,r6
   isub r9,r9,1
l121:
   * Line 45: to start + inputLength - 1
   igt r0,r10,r9
   brt l115,r0
   * Line 46: concchar output,string1,i
   concchar r5,r1,r10
   * Line 45: {Implicit "BY 1"}
   inc r10
   * Line 45: {DO-END}
   br l121
l115:
   * Line 51: {IF} padLength = 0
   ieq r9,r7,0
   brf l129,r9
   * Line 51: {THEN}
   * Line 51: pad = " "
   load r3," "
l129:
   * Line 52: strchar padchar,pad,padchar
   strchar r4,r3,r4
   * Line 54: {DO}
   * Line 54: i = 1
   load r10,1
   * Line 54: to length - inputLength
   isub r9,a3,r6
l146:
   * Line 54: to length - inputLength
   igt r0,r10,r9
   brt l141,r0
   * Line 55: appendchar output,padchar
   appendchar r5,r4
   * Line 54: {Implicit "BY 1"}
   inc r10
   * Line 54: {DO-END}
   br l146
l141:
l122:
   br l156
   * Line 63: {ELSE}
l172:
   * Line 63: {IF} padLength = 0
   ieq r11,r7,0
   brf l155,r11
   * Line 63: {THEN}
   * Line 63: pad = " "
   load r3," "
l155:
   * Line 64: strchar padchar,pad,padchar
   strchar r4,r3,r4
   * Line 66: {DO}
   * Line 66: i = 1
   load r10,1
   * Line 66: to length
l171:
   * Line 66: to length
   igt r0,r10,a3
   brt l166,r0
   * Line 67: appendchar output,padchar
   appendchar r5,r4
   * Line 66: {Implicit "BY 1"}
   inc r10
   * Line 66: {DO-END}
   br l171
l166:
l156:
   * Line 72: return output
   ret r5
